{"ast":null,"code":"import _objectSpread from\"/Users/kellyripple/Sandbox/wordle/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/Users/kellyripple/Sandbox/wordle/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/kellyripple/Sandbox/wordle/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{letters,status}from'./constants';import{useEffect,useState}from'react';import{EndGameModal}from'./components/EndGameModal';import{InfoModal}from'./components/InfoModal';import{Keyboard}from'./components/Keyboard';import{SettingsModal}from'./components/SettingsModal';import answers from'./data/answers';import{useLocalStorage}from'./hooks/useLocalStorage';import{ReactComponent as Info}from'./data/Info.svg';import{ReactComponent as Settings}from'./data/Settings.svg';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var words=require('./data/words').default;var state={playing:'playing',won:'won',lost:'lost'};export var difficulty={easy:'easy',normal:'normal',hard:'hard'};var getRandomAnswer=function getRandomAnswer(){var randomIndex=Math.floor(Math.random()*answers.length);return answers[randomIndex].toUpperCase();};function App(){var initialStates={answer:function answer(){return getRandomAnswer();},gameState:state.playing,board:[['','','','',''],['','','','',''],['','','','',''],['','','','',''],['','','','',''],['','','','','']],cellStatuses:Array(6).fill(Array(5).fill(status.unguessed)),currentRow:0,currentCol:0,letterStatuses:function letterStatuses(){var letterStatuses={};letters.forEach(function(letter){letterStatuses[letter]=status.unguessed;});return letterStatuses;},submittedInvalidWord:false};var _useLocalStorage=useLocalStorage('stateAnswer',initialStates.answer()),_useLocalStorage2=_slicedToArray(_useLocalStorage,2),answer=_useLocalStorage2[0],setAnswer=_useLocalStorage2[1];var _useLocalStorage3=useLocalStorage('stateGameState',initialStates.gameState),_useLocalStorage4=_slicedToArray(_useLocalStorage3,2),gameState=_useLocalStorage4[0],setGameState=_useLocalStorage4[1];var _useLocalStorage5=useLocalStorage('stateBoard',initialStates.board),_useLocalStorage6=_slicedToArray(_useLocalStorage5,2),board=_useLocalStorage6[0],setBoard=_useLocalStorage6[1];var _useLocalStorage7=useLocalStorage('stateCellStatuses',initialStates.cellStatuses),_useLocalStorage8=_slicedToArray(_useLocalStorage7,2),cellStatuses=_useLocalStorage8[0],setCellStatuses=_useLocalStorage8[1];var _useLocalStorage9=useLocalStorage('stateCurrentRow',initialStates.currentRow),_useLocalStorage10=_slicedToArray(_useLocalStorage9,2),currentRow=_useLocalStorage10[0],setCurrentRow=_useLocalStorage10[1];var _useLocalStorage11=useLocalStorage('stateCurrentCol',initialStates.currentCol),_useLocalStorage12=_slicedToArray(_useLocalStorage11,2),currentCol=_useLocalStorage12[0],setCurrentCol=_useLocalStorage12[1];var _useLocalStorage13=useLocalStorage('stateLetterStatuses',initialStates.letterStatuses()),_useLocalStorage14=_slicedToArray(_useLocalStorage13,2),letterStatuses=_useLocalStorage14[0],setLetterStatuses=_useLocalStorage14[1];var _useLocalStorage15=useLocalStorage('stateSubmittedInvalidWord',initialStates.submittedInvalidWord),_useLocalStorage16=_slicedToArray(_useLocalStorage15,2),submittedInvalidWord=_useLocalStorage16[0],setSubmittedInvalidWord=_useLocalStorage16[1];var _useLocalStorage17=useLocalStorage('current-streak',0),_useLocalStorage18=_slicedToArray(_useLocalStorage17,2),currentStreak=_useLocalStorage18[0],setCurrentStreak=_useLocalStorage18[1];var _useLocalStorage19=useLocalStorage('longest-streak',0),_useLocalStorage20=_slicedToArray(_useLocalStorage19,2),longestStreak=_useLocalStorage20[0],setLongestStreak=_useLocalStorage20[1];var _useState=useState(false),_useState2=_slicedToArray(_useState,2),modalIsOpen=_useState2[0],setIsOpen=_useState2[1];var _useLocalStorage21=useLocalStorage('first-time',true),_useLocalStorage22=_slicedToArray(_useLocalStorage21,2),firstTime=_useLocalStorage22[0],setFirstTime=_useLocalStorage22[1];var _useState3=useState(firstTime),_useState4=_slicedToArray(_useState3,2),infoModalIsOpen=_useState4[0],setInfoModalIsOpen=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),settingsModalIsOpen=_useState6[0],setSettingsModalIsOpen=_useState6[1];var _useLocalStorage23=useLocalStorage('difficulty',difficulty.normal),_useLocalStorage24=_slicedToArray(_useLocalStorage23,2),difficultyLevel=_useLocalStorage24[0],setDifficultyLevel=_useLocalStorage24[1];var getDifficultyLevelInstructions=function getDifficultyLevelInstructions(){if(difficultyLevel===difficulty.easy){return'Guess any 5 letters';}else if(difficultyLevel===difficulty.hard){return\"Guess any valid word using all the hints you've been given\";}else{return'Guess any valid word';}};var eg={};var _useLocalStorage25=useLocalStorage('exact-guesses',eg),_useLocalStorage26=_slicedToArray(_useLocalStorage25,2),exactGuesses=_useLocalStorage26[0],setExactGuesses=_useLocalStorage26[1];var openModal=function openModal(){return setIsOpen(true);};var closeModal=function closeModal(){return setIsOpen(false);};var handleInfoClose=function handleInfoClose(){setFirstTime(false);setInfoModalIsOpen(false);};var _useLocalStorage27=useLocalStorage('dark-mode',false),_useLocalStorage28=_slicedToArray(_useLocalStorage27,2),darkMode=_useLocalStorage28[0],setDarkMode=_useLocalStorage28[1];var toggleDarkMode=function toggleDarkMode(){return setDarkMode(function(prev){return!prev;});};useEffect(function(){if(gameState!==state.playing){setTimeout(function(){openModal();},500);}},[gameState]);var getCellStyles=function getCellStyles(rowNumber,colNumber,letter){if(rowNumber===currentRow){if(letter){return\"nm-inset-background dark:nm-inset-background-dark text-primary dark:text-primary-dark \".concat(submittedInvalidWord?'border border-red-800':'');}return'nm-flat-background dark:nm-flat-background-dark text-primary dark:text-primary-dark';}switch(cellStatuses[rowNumber][colNumber]){case status.green:return'nm-inset-n-green text-gray-50';case status.yellow:return'nm-inset-yellow-500 text-gray-50';case status.gray:return'nm-inset-n-gray text-gray-50';default:return'nm-flat-background dark:nm-flat-background-dark text-primary dark:text-primary-dark';}};var addLetter=function addLetter(letter){setSubmittedInvalidWord(false);setBoard(function(prev){if(currentCol>4){return prev;}var newBoard=_toConsumableArray(prev);newBoard[currentRow][currentCol]=letter;return newBoard;});if(currentCol<5){setCurrentCol(function(prev){return prev+1;});}};// returns an array with a boolean of if the word is valid and an error message if it is not\nvar isValidWord=function isValidWord(word){if(word.length<5)return[false,\"please enter a 5 letter word\"];if(difficultyLevel===difficulty.easy)return[true];debugger;if(!words[word.toLowerCase()])return[false,\"\".concat(word,\" is not a valid word. Please try again.\")];if(difficultyLevel===difficulty.normal)return[true];var guessedLetters=Object.entries(letterStatuses).filter(function(_ref){var _ref2=_slicedToArray(_ref,2),letter=_ref2[0],letterStatus=_ref2[1];return[status.yellow,status.green].includes(letterStatus);});var yellowsUsed=guessedLetters.every(function(_ref3){var _ref4=_slicedToArray(_ref3,2),letter=_ref4[0],_=_ref4[1];return word.includes(letter);});var greensUsed=Object.entries(exactGuesses).every(function(_ref5){var _ref6=_slicedToArray(_ref5,2),position=_ref6[0],letter=_ref6[1];return word[parseInt(position)]===letter;});if(!yellowsUsed||!greensUsed)return[false,\"In hard mode, you must use all the hints you've been given.\"];return[true];};var onEnterPress=function onEnterPress(){var word=board[currentRow].join('');var _isValidWord=isValidWord(word),_isValidWord2=_slicedToArray(_isValidWord,2),valid=_isValidWord2[0],_err=_isValidWord2[1];if(!valid){console.log({valid:valid,_err:_err});setSubmittedInvalidWord(true);// alert(_err)\nreturn;}if(currentRow===6)return;updateCellStatuses(word,currentRow);updateLetterStatuses(word);setCurrentRow(function(prev){return prev+1;});setCurrentCol(0);};var onDeletePress=function onDeletePress(){setSubmittedInvalidWord(false);if(currentCol===0)return;setBoard(function(prev){var newBoard=_toConsumableArray(prev);newBoard[currentRow][currentCol-1]='';return newBoard;});setCurrentCol(function(prev){return prev-1;});};var updateCellStatuses=function updateCellStatuses(word,rowNumber){var fixedLetters={};setCellStatuses(function(prev){var newCellStatuses=_toConsumableArray(prev);newCellStatuses[rowNumber]=_toConsumableArray(prev[rowNumber]);var wordLength=word.length;var answerLetters=answer.split('');// set all to gray\nfor(var i=0;i<wordLength;i++){newCellStatuses[rowNumber][i]=status.gray;}// check greens\nfor(var _i=wordLength-1;_i>=0;_i--){if(word[_i]===answer[_i]){newCellStatuses[rowNumber][_i]=status.green;answerLetters.splice(_i,1);fixedLetters[_i]=answer[_i];}}// check yellows\nfor(var _i2=0;_i2<wordLength;_i2++){if(answerLetters.includes(word[_i2])&&newCellStatuses[rowNumber][_i2]!==status.green){newCellStatuses[rowNumber][_i2]=status.yellow;answerLetters.splice(answerLetters.indexOf(word[_i2]),1);}}return newCellStatuses;});setExactGuesses(function(prev){return _objectSpread(_objectSpread({},prev),fixedLetters);});};var isRowAllGreen=function isRowAllGreen(row){return row.every(function(cell){return cell===status.green;});};// every time cellStatuses updates, check if the game is won or lost\nuseEffect(function(){var cellStatusesCopy=_toConsumableArray(cellStatuses);var reversedStatuses=cellStatusesCopy.reverse();var lastFilledRow=reversedStatuses.find(function(r){return r[0]!==status.unguessed;});if(gameState===state.playing&&lastFilledRow&&isRowAllGreen(lastFilledRow)){setGameState(state.won);var streak=currentStreak+1;setCurrentStreak(streak);setLongestStreak(function(prev){return streak>prev?streak:prev;});}else if(gameState===state.playing&&currentRow===6){setGameState(state.lost);setCurrentStreak(0);}},[cellStatuses,currentRow,gameState,setGameState,currentStreak,setCurrentStreak,setLongestStreak]);var updateLetterStatuses=function updateLetterStatuses(word){setLetterStatuses(function(prev){var newLetterStatuses=_objectSpread({},prev);var wordLength=word.length;for(var i=0;i<wordLength;i++){if(newLetterStatuses[word[i]]===status.green)continue;if(word[i]===answer[i]){newLetterStatuses[word[i]]=status.green;}else if(answer.includes(word[i])){newLetterStatuses[word[i]]=status.yellow;}else{newLetterStatuses[word[i]]=status.gray;}}return newLetterStatuses;});};var playAgain=function playAgain(){setAnswer(initialStates.answer());setGameState(initialStates.gameState);setBoard(initialStates.board);setCellStatuses(initialStates.cellStatuses);setCurrentRow(initialStates.currentRow);setCurrentCol(initialStates.currentCol);setLetterStatuses(initialStates.letterStatuses());setSubmittedInvalidWord(initialStates.submittedInvalidWord);setExactGuesses({});closeModal();};var modalStyles={overlay:{position:'fixed',top:0,left:0,right:0,bottom:0,backgroundColor:darkMode?'hsl(231, 16%, 25%)':'hsl(231, 16%, 92%)',zIndex:99},content:{top:'50%',left:'50%',right:'auto',bottom:'auto',transform:'translate(-50%, -50%)',height:'calc(100% - 2rem)',width:'calc(100% - 2rem)',backgroundColor:darkMode?'hsl(231, 16%, 25%)':'hsl(231, 16%, 92%)',boxShadow:\"\".concat(darkMode?'0.2em 0.2em calc(0.2em * 2) #252834, calc(0.2em * -1) calc(0.2em * -1) calc(0.2em * 2) #43475C':'0.2em 0.2em calc(0.2em * 2) #A3A7BD, calc(0.2em * -1) calc(0.2em * -1) calc(0.2em * 2) #FFFFFF'),border:'none',borderRadius:'1rem',maxWidth:'475px',maxHeight:'650px',position:'relative'}};return/*#__PURE__*/_jsx(\"div\",{className:darkMode?'dark':'',children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col justify-between h-fill bg-background dark:bg-background-dark\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"flex items-center py-2 px-3 text-primary dark:text-primary-dark\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:function onClick(){return setSettingsModalIsOpen(true);},className:\"p-1 rounded-full\",children:/*#__PURE__*/_jsx(Settings,{})}),/*#__PURE__*/_jsx(\"h1\",{className:\"flex-1 text-center text-xl xxs:text-2xl sm:text-4xl tracking-wide font-bold font-righteous\",children:\"WORD MASTER\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:function onClick(){return setInfoModalIsOpen(true);},className:\"p-1 rounded-full\",children:/*#__PURE__*/_jsx(Info,{})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center flex-col py-3 flex-1 justify-center relative\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"relative\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-5 grid-flow-row gap-4\",children:board.map(function(row,rowNumber){return row.map(function(letter,colNumber){return/*#__PURE__*/_jsx(\"span\",{className:\"\".concat(getCellStyles(rowNumber,colNumber,letter),\" inline-flex items-center font-medium justify-center text-lg w-[13vw] h-[13vw] xs:w-14 xs:h-14 sm:w-20 sm:h-20 rounded-full\"),children:letter},colNumber);});})}),/*#__PURE__*/_jsx(\"div\",{className:\"absolute -bottom-24 left-1/2 transform -translate-x-1/2 \".concat(gameState===state.playing?'hidden':''),children:/*#__PURE__*/_jsx(\"div\",{className:darkMode?'dark':'',children:/*#__PURE__*/_jsx(\"button\",{autoFocus:true,type:\"button\",className:\"rounded-lg z-10 px-6 py-2 text-lg nm-flat-background dark:nm-flat-background-dark hover:nm-inset-background dark:hover:nm-inset-background-dark text-primary dark:text-primary-dark\",onClick:playAgain,children:\"Play Again\"})})})]})}),/*#__PURE__*/_jsx(InfoModal,{isOpen:infoModalIsOpen,handleClose:handleInfoClose,darkMode:darkMode,styles:modalStyles}),/*#__PURE__*/_jsx(EndGameModal,{isOpen:modalIsOpen,handleClose:closeModal,styles:modalStyles,darkMode:darkMode,gameState:gameState,state:state,currentStreak:currentStreak,longestStreak:longestStreak,answer:answer,playAgain:playAgain}),/*#__PURE__*/_jsx(SettingsModal,{isOpen:settingsModalIsOpen,handleClose:function handleClose(){return setSettingsModalIsOpen(false);},styles:modalStyles,darkMode:darkMode,toggleDarkMode:toggleDarkMode,difficultyLevel:difficultyLevel,setDifficultyLevel:setDifficultyLevel,levelInstructions:getDifficultyLevelInstructions()}),/*#__PURE__*/_jsx(\"div\",{className:\"h-auto relative \".concat(gameState===state.playing?'':'invisible'),children:/*#__PURE__*/_jsx(Keyboard,{letterStatuses:letterStatuses,addLetter:addLetter,onEnterPress:onEnterPress,onDeletePress:onDeletePress,gameDisabled:gameState!==state.playing})})]})});}export default App;","map":{"version":3,"sources":["/Users/kellyripple/Sandbox/wordle/src/App.tsx"],"names":["letters","status","useEffect","useState","EndGameModal","InfoModal","Keyboard","SettingsModal","answers","useLocalStorage","ReactComponent","Info","Settings","words","require","default","state","playing","won","lost","difficulty","easy","normal","hard","getRandomAnswer","randomIndex","Math","floor","random","length","toUpperCase","App","initialStates","answer","gameState","board","cellStatuses","Array","fill","unguessed","currentRow","currentCol","letterStatuses","forEach","letter","submittedInvalidWord","setAnswer","setGameState","setBoard","setCellStatuses","setCurrentRow","setCurrentCol","setLetterStatuses","setSubmittedInvalidWord","currentStreak","setCurrentStreak","longestStreak","setLongestStreak","modalIsOpen","setIsOpen","firstTime","setFirstTime","infoModalIsOpen","setInfoModalIsOpen","settingsModalIsOpen","setSettingsModalIsOpen","difficultyLevel","setDifficultyLevel","getDifficultyLevelInstructions","eg","exactGuesses","setExactGuesses","openModal","closeModal","handleInfoClose","darkMode","setDarkMode","toggleDarkMode","prev","setTimeout","getCellStyles","rowNumber","colNumber","green","yellow","gray","addLetter","newBoard","isValidWord","word","toLowerCase","guessedLetters","Object","entries","filter","letterStatus","includes","yellowsUsed","every","_","greensUsed","position","parseInt","onEnterPress","join","valid","_err","console","log","updateCellStatuses","updateLetterStatuses","onDeletePress","fixedLetters","newCellStatuses","wordLength","answerLetters","split","i","splice","indexOf","isRowAllGreen","row","cell","cellStatusesCopy","reversedStatuses","reverse","lastFilledRow","find","r","streak","newLetterStatuses","playAgain","modalStyles","overlay","top","left","right","bottom","backgroundColor","zIndex","content","transform","height","width","boxShadow","border","borderRadius","maxWidth","maxHeight","map"],"mappings":"4WAAA,OAASA,OAAT,CAAkBC,MAAlB,KAAgC,aAAhC,CACA,OAASC,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAEA,OAASC,YAAT,KAA6B,2BAA7B,CACA,OAASC,SAAT,KAA0B,wBAA1B,CACA,OAASC,QAAT,KAAyB,uBAAzB,CACA,OAASC,aAAT,KAA8B,4BAA9B,CACA,MAAOC,CAAAA,OAAP,KAAoB,gBAApB,CACA,OAASC,eAAT,KAAgC,yBAAhC,CACA,OAASC,cAAc,GAAIC,CAAAA,IAA3B,KAAuC,iBAAvC,CACA,OAASD,cAAc,GAAIE,CAAAA,QAA3B,KAA2C,qBAA3C,C,wFACA,GAAMC,CAAAA,KAAK,CAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBC,OAAtC,CAEA,GAAMC,CAAAA,KAAK,CAAG,CACZC,OAAO,CAAE,SADG,CAEZC,GAAG,CAAE,KAFO,CAGZC,IAAI,CAAE,MAHM,CAAd,CAMA,MAAO,IAAMC,CAAAA,UAAU,CAAG,CACxBC,IAAI,CAAE,MADkB,CAExBC,MAAM,CAAE,QAFgB,CAGxBC,IAAI,CAAE,MAHkB,CAAnB,CAMP,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC5B,GAAMC,CAAAA,WAAW,CAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgBpB,OAAO,CAACqB,MAAnC,CAApB,CACA,MAAOrB,CAAAA,OAAO,CAACiB,WAAD,CAAP,CAAqBK,WAArB,EAAP,CACD,CAHD,CAgBA,QAASC,CAAAA,GAAT,EAAe,CACb,GAAMC,CAAAA,aAAoB,CAAG,CAC3BC,MAAM,CAAE,wBAAMT,CAAAA,eAAe,EAArB,EADmB,CAE3BU,SAAS,CAAElB,KAAK,CAACC,OAFU,CAG3BkB,KAAK,CAAE,CACL,CAAC,EAAD,CAAK,EAAL,CAAS,EAAT,CAAa,EAAb,CAAiB,EAAjB,CADK,CAEL,CAAC,EAAD,CAAK,EAAL,CAAS,EAAT,CAAa,EAAb,CAAiB,EAAjB,CAFK,CAGL,CAAC,EAAD,CAAK,EAAL,CAAS,EAAT,CAAa,EAAb,CAAiB,EAAjB,CAHK,CAIL,CAAC,EAAD,CAAK,EAAL,CAAS,EAAT,CAAa,EAAb,CAAiB,EAAjB,CAJK,CAKL,CAAC,EAAD,CAAK,EAAL,CAAS,EAAT,CAAa,EAAb,CAAiB,EAAjB,CALK,CAML,CAAC,EAAD,CAAK,EAAL,CAAS,EAAT,CAAa,EAAb,CAAiB,EAAjB,CANK,CAHoB,CAW3BC,YAAY,CAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAcD,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAcrC,MAAM,CAACsC,SAArB,CAAd,CAXa,CAY3BC,UAAU,CAAE,CAZe,CAa3BC,UAAU,CAAE,CAbe,CAc3BC,cAAc,CAAE,yBAAM,CACpB,GAAMA,CAAAA,cAAyC,CAAG,EAAlD,CACA1C,OAAO,CAAC2C,OAAR,CAAgB,SAACC,MAAD,CAAY,CAC1BF,cAAc,CAACE,MAAD,CAAd,CAAyB3C,MAAM,CAACsC,SAAhC,CACD,CAFD,EAGA,MAAOG,CAAAA,cAAP,CACD,CApB0B,CAqB3BG,oBAAoB,CAAE,KArBK,CAA7B,CAwBA,qBAA4BpC,eAAe,CAAC,aAAD,CAAgBuB,aAAa,CAACC,MAAd,EAAhB,CAA3C,sDAAOA,MAAP,sBAAea,SAAf,sBACA,sBAAkCrC,eAAe,CAAC,gBAAD,CAAmBuB,aAAa,CAACE,SAAjC,CAAjD,uDAAOA,SAAP,sBAAkBa,YAAlB,sBACA,sBAA0BtC,eAAe,CAAC,YAAD,CAAeuB,aAAa,CAACG,KAA7B,CAAzC,uDAAOA,KAAP,sBAAca,QAAd,sBACA,sBAAwCvC,eAAe,CACrD,mBADqD,CAErDuB,aAAa,CAACI,YAFuC,CAAvD,uDAAOA,YAAP,sBAAqBa,eAArB,sBAIA,sBAAoCxC,eAAe,CAAC,iBAAD,CAAoBuB,aAAa,CAACQ,UAAlC,CAAnD,wDAAOA,UAAP,uBAAmBU,aAAnB,uBACA,uBAAoCzC,eAAe,CAAC,iBAAD,CAAoBuB,aAAa,CAACS,UAAlC,CAAnD,yDAAOA,UAAP,uBAAmBU,aAAnB,uBACA,uBAA4C1C,eAAe,CACzD,qBADyD,CAEzDuB,aAAa,CAACU,cAAd,EAFyD,CAA3D,yDAAOA,cAAP,uBAAuBU,iBAAvB,uBAIA,uBAAwD3C,eAAe,CACrE,2BADqE,CAErEuB,aAAa,CAACa,oBAFuD,CAAvE,yDAAOA,oBAAP,uBAA6BQ,uBAA7B,uBAKA,uBAA0C5C,eAAe,CAAC,gBAAD,CAAmB,CAAnB,CAAzD,yDAAO6C,aAAP,uBAAsBC,gBAAtB,uBACA,uBAA0C9C,eAAe,CAAC,gBAAD,CAAmB,CAAnB,CAAzD,yDAAO+C,aAAP,uBAAsBC,gBAAtB,uBACA,cAAiCtD,QAAQ,CAAC,KAAD,CAAzC,wCAAOuD,WAAP,eAAoBC,SAApB,eACA,uBAAkClD,eAAe,CAAC,YAAD,CAAe,IAAf,CAAjD,yDAAOmD,SAAP,uBAAkBC,YAAlB,uBACA,eAA8C1D,QAAQ,CAACyD,SAAD,CAAtD,yCAAOE,eAAP,eAAwBC,kBAAxB,eACA,eAAsD5D,QAAQ,CAAC,KAAD,CAA9D,yCAAO6D,mBAAP,eAA4BC,sBAA5B,eACA,uBAA8CxD,eAAe,CAAC,YAAD,CAAeW,UAAU,CAACE,MAA1B,CAA7D,yDAAO4C,eAAP,uBAAwBC,kBAAxB,uBACA,GAAMC,CAAAA,8BAA8B,CAAG,QAAjCA,CAAAA,8BAAiC,EAAM,CAC3C,GAAIF,eAAe,GAAK9C,UAAU,CAACC,IAAnC,CAAyC,CACvC,MAAO,qBAAP,CACD,CAFD,IAEO,IAAI6C,eAAe,GAAK9C,UAAU,CAACG,IAAnC,CAAyC,CAC9C,MAAO,4DAAP,CACD,CAFM,IAEA,CACL,MAAO,sBAAP,CACD,CACF,CARD,CASA,GAAM8C,CAAAA,EAA6B,CAAG,EAAtC,CACA,uBAAwC5D,eAAe,CAAC,eAAD,CAAkB4D,EAAlB,CAAvD,yDAAOC,YAAP,uBAAqBC,eAArB,uBAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,SAAMb,CAAAA,SAAS,CAAC,IAAD,CAAf,EAAlB,CACA,GAAMc,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,SAAMd,CAAAA,SAAS,CAAC,KAAD,CAAf,EAAnB,CACA,GAAMe,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC5Bb,YAAY,CAAC,KAAD,CAAZ,CACAE,kBAAkB,CAAC,KAAD,CAAlB,CACD,CAHD,CAKA,uBAAgCtD,eAAe,CAAC,WAAD,CAAc,KAAd,CAA/C,yDAAOkE,QAAP,uBAAiBC,WAAjB,uBACA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,SAAMD,CAAAA,WAAW,CAAC,SAACE,IAAD,QAAmB,CAACA,IAApB,EAAD,CAAjB,EAAvB,CAEA5E,SAAS,CAAC,UAAM,CACd,GAAIgC,SAAS,GAAKlB,KAAK,CAACC,OAAxB,CAAiC,CAC/B8D,UAAU,CAAC,UAAM,CACfP,SAAS,GACV,CAFS,CAEP,GAFO,CAAV,CAGD,CACF,CANQ,CAMN,CAACtC,SAAD,CANM,CAAT,CAQA,GAAM8C,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,SAAD,CAAoBC,SAApB,CAAuCtC,MAAvC,CAA0D,CAC9E,GAAIqC,SAAS,GAAKzC,UAAlB,CAA8B,CAC5B,GAAII,MAAJ,CAAY,CACV,sGACEC,oBAAoB,CAAG,uBAAH,CAA6B,EADnD,EAGD,CACD,MAAO,qFAAP,CACD,CAED,OAAQT,YAAY,CAAC6C,SAAD,CAAZ,CAAwBC,SAAxB,CAAR,EACE,IAAKjF,CAAAA,MAAM,CAACkF,KAAZ,CACE,MAAO,+BAAP,CACF,IAAKlF,CAAAA,MAAM,CAACmF,MAAZ,CACE,MAAO,kCAAP,CACF,IAAKnF,CAAAA,MAAM,CAACoF,IAAZ,CACE,MAAO,8BAAP,CACF,QACE,MAAO,qFAAP,CARJ,CAUD,CApBD,CAsBA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAC1C,MAAD,CAAoB,CACpCS,uBAAuB,CAAC,KAAD,CAAvB,CACAL,QAAQ,CAAC,SAAC8B,IAAD,CAAsB,CAC7B,GAAIrC,UAAU,CAAG,CAAjB,CAAoB,CAClB,MAAOqC,CAAAA,IAAP,CACD,CACD,GAAMS,CAAAA,QAAQ,oBAAOT,IAAP,CAAd,CACAS,QAAQ,CAAC/C,UAAD,CAAR,CAAqBC,UAArB,EAAmCG,MAAnC,CACA,MAAO2C,CAAAA,QAAP,CACD,CAPO,CAAR,CAQA,GAAI9C,UAAU,CAAG,CAAjB,CAAoB,CAClBU,aAAa,CAAC,SAAC2B,IAAD,QAAkBA,CAAAA,IAAI,CAAG,CAAzB,EAAD,CAAb,CACD,CACF,CAbD,CAeA;AACA,GAAMU,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,IAAD,CAAiD,CACnE,GAAIA,IAAI,CAAC5D,MAAL,CAAc,CAAlB,CAAqB,MAAO,CAAC,KAAD,gCAAP,CACrB,GAAIqC,eAAe,GAAK9C,UAAU,CAACC,IAAnC,CAAyC,MAAO,CAAC,IAAD,CAAP,CACzC,SACA,GAAI,CAACR,KAAK,CAAC4E,IAAI,CAACC,WAAL,EAAD,CAAV,CAAgC,MAAO,CAAC,KAAD,WAAWD,IAAX,4CAAP,CAChC,GAAIvB,eAAe,GAAK9C,UAAU,CAACE,MAAnC,CAA2C,MAAO,CAAC,IAAD,CAAP,CAC3C,GAAMqE,CAAAA,cAAc,CAAGC,MAAM,CAACC,OAAP,CAAenD,cAAf,EAA+BoD,MAA/B,CAAsC,gDAAElD,MAAF,UAAUmD,YAAV,gBAC3D,CAAC9F,MAAM,CAACmF,MAAR,CAAgBnF,MAAM,CAACkF,KAAvB,EAA8Ba,QAA9B,CAAuCD,YAAvC,CAD2D,EAAtC,CAAvB,CAGA,GAAME,CAAAA,WAAW,CAAGN,cAAc,CAACO,KAAf,CAAqB,kDAAEtD,MAAF,UAAUuD,CAAV,gBAAiBV,CAAAA,IAAI,CAACO,QAAL,CAAcpD,MAAd,CAAjB,EAArB,CAApB,CACA,GAAMwD,CAAAA,UAAU,CAAGR,MAAM,CAACC,OAAP,CAAevB,YAAf,EAA6B4B,KAA7B,CACjB,kDAAEG,QAAF,UAAYzD,MAAZ,gBAAwB6C,CAAAA,IAAI,CAACa,QAAQ,CAACD,QAAD,CAAT,CAAJ,GAA6BzD,MAArD,EADiB,CAAnB,CAGA,GAAI,CAACqD,WAAD,EAAgB,CAACG,UAArB,CACE,MAAO,CAAC,KAAD,+DAAP,CACF,MAAO,CAAC,IAAD,CAAP,CACD,CAhBD,CAkBA,GAAMG,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzB,GAAMd,CAAAA,IAAI,CAAGtD,KAAK,CAACK,UAAD,CAAL,CAAkBgE,IAAlB,CAAuB,EAAvB,CAAb,CACA,iBAAsBhB,WAAW,CAACC,IAAD,CAAjC,8CAAOgB,KAAP,kBAAcC,IAAd,kBACA,GAAI,CAACD,KAAL,CAAY,CACVE,OAAO,CAACC,GAAR,CAAY,CAAEH,KAAK,CAALA,KAAF,CAASC,IAAI,CAAJA,IAAT,CAAZ,EACArD,uBAAuB,CAAC,IAAD,CAAvB,CACA;AACA,OACD,CAED,GAAIb,UAAU,GAAK,CAAnB,CAAsB,OAEtBqE,kBAAkB,CAACpB,IAAD,CAAOjD,UAAP,CAAlB,CACAsE,oBAAoB,CAACrB,IAAD,CAApB,CACAvC,aAAa,CAAC,SAAC4B,IAAD,QAAkBA,CAAAA,IAAI,CAAG,CAAzB,EAAD,CAAb,CACA3B,aAAa,CAAC,CAAD,CAAb,CACD,CAhBD,CAkBA,GAAM4D,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B1D,uBAAuB,CAAC,KAAD,CAAvB,CACA,GAAIZ,UAAU,GAAK,CAAnB,CAAsB,OAEtBO,QAAQ,CAAC,SAAC8B,IAAD,CAAe,CACtB,GAAMS,CAAAA,QAAQ,oBAAOT,IAAP,CAAd,CACAS,QAAQ,CAAC/C,UAAD,CAAR,CAAqBC,UAAU,CAAG,CAAlC,EAAuC,EAAvC,CACA,MAAO8C,CAAAA,QAAP,CACD,CAJO,CAAR,CAMApC,aAAa,CAAC,SAAC2B,IAAD,QAAkBA,CAAAA,IAAI,CAAG,CAAzB,EAAD,CAAb,CACD,CAXD,CAaA,GAAM+B,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACpB,IAAD,CAAeR,SAAf,CAAqC,CAC9D,GAAM+B,CAAAA,YAAuC,CAAG,EAAhD,CACA/D,eAAe,CAAC,SAAC6B,IAAD,CAAe,CAC7B,GAAMmC,CAAAA,eAAe,oBAAOnC,IAAP,CAArB,CACAmC,eAAe,CAAChC,SAAD,CAAf,oBAAiCH,IAAI,CAACG,SAAD,CAArC,EACA,GAAMiC,CAAAA,UAAU,CAAGzB,IAAI,CAAC5D,MAAxB,CACA,GAAMsF,CAAAA,aAAuB,CAAGlF,MAAM,CAACmF,KAAP,CAAa,EAAb,CAAhC,CAEA;AACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGH,UAApB,CAAgCG,CAAC,EAAjC,CAAqC,CACnCJ,eAAe,CAAChC,SAAD,CAAf,CAA2BoC,CAA3B,EAAgCpH,MAAM,CAACoF,IAAvC,CACD,CAED;AACA,IAAK,GAAIgC,CAAAA,EAAC,CAAGH,UAAU,CAAG,CAA1B,CAA6BG,EAAC,EAAI,CAAlC,CAAqCA,EAAC,EAAtC,CAA0C,CACxC,GAAI5B,IAAI,CAAC4B,EAAD,CAAJ,GAAYpF,MAAM,CAACoF,EAAD,CAAtB,CAA2B,CACzBJ,eAAe,CAAChC,SAAD,CAAf,CAA2BoC,EAA3B,EAAgCpH,MAAM,CAACkF,KAAvC,CACAgC,aAAa,CAACG,MAAd,CAAqBD,EAArB,CAAwB,CAAxB,EACAL,YAAY,CAACK,EAAD,CAAZ,CAAkBpF,MAAM,CAACoF,EAAD,CAAxB,CACD,CACF,CAED;AACA,IAAK,GAAIA,CAAAA,GAAC,CAAG,CAAb,CAAgBA,GAAC,CAAGH,UAApB,CAAgCG,GAAC,EAAjC,CAAqC,CACnC,GAAIF,aAAa,CAACnB,QAAd,CAAuBP,IAAI,CAAC4B,GAAD,CAA3B,GAAmCJ,eAAe,CAAChC,SAAD,CAAf,CAA2BoC,GAA3B,IAAkCpH,MAAM,CAACkF,KAAhF,CAAuF,CACrF8B,eAAe,CAAChC,SAAD,CAAf,CAA2BoC,GAA3B,EAAgCpH,MAAM,CAACmF,MAAvC,CACA+B,aAAa,CAACG,MAAd,CAAqBH,aAAa,CAACI,OAAd,CAAsB9B,IAAI,CAAC4B,GAAD,CAA1B,CAArB,CAAqD,CAArD,EACD,CACF,CAED,MAAOJ,CAAAA,eAAP,CACD,CA7Bc,CAAf,CA8BA1C,eAAe,CAAC,SAACO,IAAD,wCAA2CA,IAA3C,EAAoDkC,YAApD,GAAD,CAAf,CACD,CAjCD,CAmCA,GAAMQ,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,GAAD,CAAmB,CACvC,MAAOA,CAAAA,GAAG,CAACvB,KAAJ,CAAU,SAACwB,IAAD,QAAkBA,CAAAA,IAAI,GAAKzH,MAAM,CAACkF,KAAlC,EAAV,CAAP,CACD,CAFD,CAIA;AACAjF,SAAS,CAAC,UAAM,CACd,GAAMyH,CAAAA,gBAAgB,oBAAOvF,YAAP,CAAtB,CACA,GAAMwF,CAAAA,gBAAgB,CAAGD,gBAAgB,CAACE,OAAjB,EAAzB,CACA,GAAMC,CAAAA,aAAa,CAAGF,gBAAgB,CAACG,IAAjB,CAAsB,SAACC,CAAD,CAAO,CACjD,MAAOA,CAAAA,CAAC,CAAC,CAAD,CAAD,GAAS/H,MAAM,CAACsC,SAAvB,CACD,CAFqB,CAAtB,CAIA,GAAIL,SAAS,GAAKlB,KAAK,CAACC,OAApB,EAA+B6G,aAA/B,EAAgDN,aAAa,CAACM,aAAD,CAAjE,CAAkF,CAChF/E,YAAY,CAAC/B,KAAK,CAACE,GAAP,CAAZ,CAEA,GAAI+G,CAAAA,MAAM,CAAG3E,aAAa,CAAG,CAA7B,CACAC,gBAAgB,CAAC0E,MAAD,CAAhB,CACAxE,gBAAgB,CAAC,SAACqB,IAAD,QAAmBmD,CAAAA,MAAM,CAAGnD,IAAT,CAAgBmD,MAAhB,CAAyBnD,IAA5C,EAAD,CAAhB,CACD,CAND,IAMO,IAAI5C,SAAS,GAAKlB,KAAK,CAACC,OAApB,EAA+BuB,UAAU,GAAK,CAAlD,CAAqD,CAC1DO,YAAY,CAAC/B,KAAK,CAACG,IAAP,CAAZ,CACAoC,gBAAgB,CAAC,CAAD,CAAhB,CACD,CACF,CAjBQ,CAiBN,CACDnB,YADC,CAEDI,UAFC,CAGDN,SAHC,CAIDa,YAJC,CAKDO,aALC,CAMDC,gBANC,CAODE,gBAPC,CAjBM,CAAT,CA2BA,GAAMqD,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACrB,IAAD,CAAkB,CAC7CrC,iBAAiB,CAAC,SAAC0B,IAAD,CAAqC,CACrD,GAAMoD,CAAAA,iBAAiB,kBAAQpD,IAAR,CAAvB,CACA,GAAMoC,CAAAA,UAAU,CAAGzB,IAAI,CAAC5D,MAAxB,CACA,IAAK,GAAIwF,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGH,UAApB,CAAgCG,CAAC,EAAjC,CAAqC,CACnC,GAAIa,iBAAiB,CAACzC,IAAI,CAAC4B,CAAD,CAAL,CAAjB,GAA+BpH,MAAM,CAACkF,KAA1C,CAAiD,SAEjD,GAAIM,IAAI,CAAC4B,CAAD,CAAJ,GAAYpF,MAAM,CAACoF,CAAD,CAAtB,CAA2B,CACzBa,iBAAiB,CAACzC,IAAI,CAAC4B,CAAD,CAAL,CAAjB,CAA6BpH,MAAM,CAACkF,KAApC,CACD,CAFD,IAEO,IAAIlD,MAAM,CAAC+D,QAAP,CAAgBP,IAAI,CAAC4B,CAAD,CAApB,CAAJ,CAA8B,CACnCa,iBAAiB,CAACzC,IAAI,CAAC4B,CAAD,CAAL,CAAjB,CAA6BpH,MAAM,CAACmF,MAApC,CACD,CAFM,IAEA,CACL8C,iBAAiB,CAACzC,IAAI,CAAC4B,CAAD,CAAL,CAAjB,CAA6BpH,MAAM,CAACoF,IAApC,CACD,CACF,CACD,MAAO6C,CAAAA,iBAAP,CACD,CAfgB,CAAjB,CAgBD,CAjBD,CAmBA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtBrF,SAAS,CAACd,aAAa,CAACC,MAAd,EAAD,CAAT,CACAc,YAAY,CAACf,aAAa,CAACE,SAAf,CAAZ,CACAc,QAAQ,CAAChB,aAAa,CAACG,KAAf,CAAR,CACAc,eAAe,CAACjB,aAAa,CAACI,YAAf,CAAf,CACAc,aAAa,CAAClB,aAAa,CAACQ,UAAf,CAAb,CACAW,aAAa,CAACnB,aAAa,CAACS,UAAf,CAAb,CACAW,iBAAiB,CAACpB,aAAa,CAACU,cAAd,EAAD,CAAjB,CACAW,uBAAuB,CAACrB,aAAa,CAACa,oBAAf,CAAvB,CACA0B,eAAe,CAAC,EAAD,CAAf,CAEAE,UAAU,GACX,CAZD,CAcA,GAAM2D,CAAAA,WAAW,CAAG,CAClBC,OAAO,CAAE,CACPhC,QAAQ,CAAE,OADH,CAEPiC,GAAG,CAAE,CAFE,CAGPC,IAAI,CAAE,CAHC,CAIPC,KAAK,CAAE,CAJA,CAKPC,MAAM,CAAE,CALD,CAMPC,eAAe,CAAE/D,QAAQ,CAAG,oBAAH,CAA0B,oBAN5C,CAOPgE,MAAM,CAAE,EAPD,CADS,CAUlBC,OAAO,CAAE,CACPN,GAAG,CAAE,KADE,CAEPC,IAAI,CAAE,KAFC,CAGPC,KAAK,CAAE,MAHA,CAIPC,MAAM,CAAE,MAJD,CAKPI,SAAS,CAAE,uBALJ,CAMPC,MAAM,CAAE,mBAND,CAOPC,KAAK,CAAE,mBAPA,CAQPL,eAAe,CAAE/D,QAAQ,CAAG,oBAAH,CAA0B,oBAR5C,CASPqE,SAAS,WACPrE,QAAQ,CACJ,gGADI,CAEJ,gGAHG,CATF,CAcPsE,MAAM,CAAE,MAdD,CAePC,YAAY,CAAE,MAfP,CAgBPC,QAAQ,CAAE,OAhBH,CAiBPC,SAAS,CAAE,OAjBJ,CAkBP/C,QAAQ,CAAE,UAlBH,CAVS,CAApB,CAgCA,mBACE,YAAK,SAAS,CAAE1B,QAAQ,CAAG,MAAH,CAAY,EAApC,uBACE,aAAK,SAAS,6EAAd,wBACE,gBAAQ,SAAS,CAAC,iEAAlB,wBACE,eACE,IAAI,CAAC,QADP,CAEE,OAAO,CAAE,yBAAMV,CAAAA,sBAAsB,CAAC,IAAD,CAA5B,EAFX,CAGE,SAAS,CAAC,kBAHZ,uBAKE,KAAC,QAAD,IALF,EADF,cAQE,WAAI,SAAS,CAAC,4FAAd,yBARF,cAWE,eACE,IAAI,CAAC,QADP,CAEE,OAAO,CAAE,yBAAMF,CAAAA,kBAAkB,CAAC,IAAD,CAAxB,EAFX,CAGE,SAAS,CAAC,kBAHZ,uBAKE,KAAC,IAAD,IALF,EAXF,GADF,cAoBE,YAAK,SAAS,CAAC,gEAAf,uBACE,aAAK,SAAS,CAAC,UAAf,wBACE,YAAK,SAAS,CAAC,sCAAf,UACG5B,KAAK,CAACkH,GAAN,CAAU,SAAC5B,GAAD,CAAgBxC,SAAhB,QACTwC,CAAAA,GAAG,CAAC4B,GAAJ,CAAQ,SAACzG,MAAD,CAAiBsC,SAAjB,qBACN,aAEE,SAAS,WAAKF,aAAa,CACzBC,SADyB,CAEzBC,SAFyB,CAGzBtC,MAHyB,CAAlB,+HAFX,UAQGA,MARH,EACOsC,SADP,CADM,EAAR,CADS,EAAV,CADH,EADF,cAiBE,YACE,SAAS,mEACPhD,SAAS,GAAKlB,KAAK,CAACC,OAApB,CAA8B,QAA9B,CAAyC,EADlC,CADX,uBAKE,YAAK,SAAS,CAAE0D,QAAQ,CAAG,MAAH,CAAY,EAApC,uBACE,eACE,SAAS,KADX,CAEE,IAAI,CAAC,QAFP,CAGE,SAAS,CAAC,qLAHZ,CAIE,OAAO,CAAEwD,SAJX,wBADF,EALF,EAjBF,GADF,EApBF,cAwDE,KAAC,SAAD,EACE,MAAM,CAAErE,eADV,CAEE,WAAW,CAAEY,eAFf,CAGE,QAAQ,CAAEC,QAHZ,CAIE,MAAM,CAAEyD,WAJV,EAxDF,cA8DE,KAAC,YAAD,EACE,MAAM,CAAE1E,WADV,CAEE,WAAW,CAAEe,UAFf,CAGE,MAAM,CAAE2D,WAHV,CAIE,QAAQ,CAAEzD,QAJZ,CAKE,SAAS,CAAEzC,SALb,CAME,KAAK,CAAElB,KANT,CAOE,aAAa,CAAEsC,aAPjB,CAQE,aAAa,CAAEE,aARjB,CASE,MAAM,CAAEvB,MATV,CAUE,SAAS,CAAEkG,SAVb,EA9DF,cA0EE,KAAC,aAAD,EACE,MAAM,CAAEnE,mBADV,CAEE,WAAW,CAAE,6BAAMC,CAAAA,sBAAsB,CAAC,KAAD,CAA5B,EAFf,CAGE,MAAM,CAAEmE,WAHV,CAIE,QAAQ,CAAEzD,QAJZ,CAKE,cAAc,CAAEE,cALlB,CAME,eAAe,CAAEX,eANnB,CAOE,kBAAkB,CAAEC,kBAPtB,CAQE,iBAAiB,CAAEC,8BAA8B,EARnD,EA1EF,cAoFE,YAAK,SAAS,2BAAqBlC,SAAS,GAAKlB,KAAK,CAACC,OAApB,CAA8B,EAA9B,CAAmC,WAAxD,CAAd,uBACE,KAAC,QAAD,EACE,cAAc,CAAEyB,cADlB,CAEE,SAAS,CAAE4C,SAFb,CAGE,YAAY,CAAEiB,YAHhB,CAIE,aAAa,CAAEQ,aAJjB,CAKE,YAAY,CAAE7E,SAAS,GAAKlB,KAAK,CAACC,OALpC,EADF,EApFF,GADF,EADF,CAkGD,CAED,cAAec,CAAAA,GAAf","sourcesContent":["import { letters, status } from './constants'\nimport { useEffect, useState } from 'react'\n\nimport { EndGameModal } from './components/EndGameModal'\nimport { InfoModal } from './components/InfoModal'\nimport { Keyboard } from './components/Keyboard'\nimport { SettingsModal } from './components/SettingsModal'\nimport answers from './data/answers'\nimport { useLocalStorage } from './hooks/useLocalStorage'\nimport { ReactComponent as Info } from './data/Info.svg'\nimport { ReactComponent as Settings } from './data/Settings.svg'\nconst words = require('./data/words').default as { [key: string]: boolean }\n\nconst state = {\n  playing: 'playing',\n  won: 'won',\n  lost: 'lost',\n}\n\nexport const difficulty = {\n  easy: 'easy',\n  normal: 'normal',\n  hard: 'hard',\n}\n\nconst getRandomAnswer = () => {\n  const randomIndex = Math.floor(Math.random() * answers.length)\n  return answers[randomIndex].toUpperCase()\n}\n\ntype State = {\n  answer: () => string\n  gameState: string\n  board: string[][]\n  cellStatuses: string[][]\n  currentRow: number\n  currentCol: number\n  letterStatuses: () => { [key: string]: string }\n  submittedInvalidWord: boolean\n}\n\nfunction App() {\n  const initialStates: State = {\n    answer: () => getRandomAnswer(),\n    gameState: state.playing,\n    board: [\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n    ],\n    cellStatuses: Array(6).fill(Array(5).fill(status.unguessed)),\n    currentRow: 0,\n    currentCol: 0,\n    letterStatuses: () => {\n      const letterStatuses: { [key: string]: string } = {}\n      letters.forEach((letter) => {\n        letterStatuses[letter] = status.unguessed\n      })\n      return letterStatuses\n    },\n    submittedInvalidWord: false,\n  }\n\n  const [answer, setAnswer] = useLocalStorage('stateAnswer', initialStates.answer())\n  const [gameState, setGameState] = useLocalStorage('stateGameState', initialStates.gameState)\n  const [board, setBoard] = useLocalStorage('stateBoard', initialStates.board)\n  const [cellStatuses, setCellStatuses] = useLocalStorage(\n    'stateCellStatuses',\n    initialStates.cellStatuses\n  )\n  const [currentRow, setCurrentRow] = useLocalStorage('stateCurrentRow', initialStates.currentRow)\n  const [currentCol, setCurrentCol] = useLocalStorage('stateCurrentCol', initialStates.currentCol)\n  const [letterStatuses, setLetterStatuses] = useLocalStorage(\n    'stateLetterStatuses',\n    initialStates.letterStatuses()\n  )\n  const [submittedInvalidWord, setSubmittedInvalidWord] = useLocalStorage(\n    'stateSubmittedInvalidWord',\n    initialStates.submittedInvalidWord\n  )\n\n  const [currentStreak, setCurrentStreak] = useLocalStorage('current-streak', 0)\n  const [longestStreak, setLongestStreak] = useLocalStorage('longest-streak', 0)\n  const [modalIsOpen, setIsOpen] = useState(false)\n  const [firstTime, setFirstTime] = useLocalStorage('first-time', true)\n  const [infoModalIsOpen, setInfoModalIsOpen] = useState(firstTime)\n  const [settingsModalIsOpen, setSettingsModalIsOpen] = useState(false)\n  const [difficultyLevel, setDifficultyLevel] = useLocalStorage('difficulty', difficulty.normal)\n  const getDifficultyLevelInstructions = () => {\n    if (difficultyLevel === difficulty.easy) {\n      return 'Guess any 5 letters'\n    } else if (difficultyLevel === difficulty.hard) {\n      return \"Guess any valid word using all the hints you've been given\"\n    } else {\n      return 'Guess any valid word'\n    }\n  }\n  const eg: { [key: number]: string } = {}\n  const [exactGuesses, setExactGuesses] = useLocalStorage('exact-guesses', eg)\n\n  const openModal = () => setIsOpen(true)\n  const closeModal = () => setIsOpen(false)\n  const handleInfoClose = () => {\n    setFirstTime(false)\n    setInfoModalIsOpen(false)\n  }\n\n  const [darkMode, setDarkMode] = useLocalStorage('dark-mode', false)\n  const toggleDarkMode = () => setDarkMode((prev: boolean) => !prev)\n\n  useEffect(() => {\n    if (gameState !== state.playing) {\n      setTimeout(() => {\n        openModal()\n      }, 500)\n    }\n  }, [gameState])\n\n  const getCellStyles = (rowNumber: number, colNumber: number, letter: string) => {\n    if (rowNumber === currentRow) {\n      if (letter) {\n        return `nm-inset-background dark:nm-inset-background-dark text-primary dark:text-primary-dark ${\n          submittedInvalidWord ? 'border border-red-800' : ''\n        }`\n      }\n      return 'nm-flat-background dark:nm-flat-background-dark text-primary dark:text-primary-dark'\n    }\n\n    switch (cellStatuses[rowNumber][colNumber]) {\n      case status.green:\n        return 'nm-inset-n-green text-gray-50'\n      case status.yellow:\n        return 'nm-inset-yellow-500 text-gray-50'\n      case status.gray:\n        return 'nm-inset-n-gray text-gray-50'\n      default:\n        return 'nm-flat-background dark:nm-flat-background-dark text-primary dark:text-primary-dark'\n    }\n  }\n\n  const addLetter = (letter: string) => {\n    setSubmittedInvalidWord(false)\n    setBoard((prev: string[][]) => {\n      if (currentCol > 4) {\n        return prev\n      }\n      const newBoard = [...prev]\n      newBoard[currentRow][currentCol] = letter\n      return newBoard\n    })\n    if (currentCol < 5) {\n      setCurrentCol((prev: number) => prev + 1)\n    }\n  }\n\n  // returns an array with a boolean of if the word is valid and an error message if it is not\n  const isValidWord = (word: string): [boolean] | [boolean, string] => {\n    if (word.length < 5) return [false, `please enter a 5 letter word`]\n    if (difficultyLevel === difficulty.easy) return [true]\n    debugger\n    if (!words[word.toLowerCase()]) return [false, `${word} is not a valid word. Please try again.`]\n    if (difficultyLevel === difficulty.normal) return [true]\n    const guessedLetters = Object.entries(letterStatuses).filter(([letter, letterStatus]) =>\n      [status.yellow, status.green].includes(letterStatus)\n    )\n    const yellowsUsed = guessedLetters.every(([letter, _]) => word.includes(letter))\n    const greensUsed = Object.entries(exactGuesses).every(\n      ([position, letter]) => word[parseInt(position)] === letter\n    )\n    if (!yellowsUsed || !greensUsed)\n      return [false, `In hard mode, you must use all the hints you've been given.`]\n    return [true]\n  }\n\n  const onEnterPress = () => {\n    const word = board[currentRow].join('')\n    const [valid, _err] = isValidWord(word)\n    if (!valid) {\n      console.log({ valid, _err })\n      setSubmittedInvalidWord(true)\n      // alert(_err)\n      return\n    }\n\n    if (currentRow === 6) return\n\n    updateCellStatuses(word, currentRow)\n    updateLetterStatuses(word)\n    setCurrentRow((prev: number) => prev + 1)\n    setCurrentCol(0)\n  }\n\n  const onDeletePress = () => {\n    setSubmittedInvalidWord(false)\n    if (currentCol === 0) return\n\n    setBoard((prev: any) => {\n      const newBoard = [...prev]\n      newBoard[currentRow][currentCol - 1] = ''\n      return newBoard\n    })\n\n    setCurrentCol((prev: number) => prev - 1)\n  }\n\n  const updateCellStatuses = (word: string, rowNumber: number) => {\n    const fixedLetters: { [key: number]: string } = {}\n    setCellStatuses((prev: any) => {\n      const newCellStatuses = [...prev]\n      newCellStatuses[rowNumber] = [...prev[rowNumber]]\n      const wordLength = word.length\n      const answerLetters: string[] = answer.split('')\n\n      // set all to gray\n      for (let i = 0; i < wordLength; i++) {\n        newCellStatuses[rowNumber][i] = status.gray\n      }\n\n      // check greens\n      for (let i = wordLength - 1; i >= 0; i--) {\n        if (word[i] === answer[i]) {\n          newCellStatuses[rowNumber][i] = status.green\n          answerLetters.splice(i, 1)\n          fixedLetters[i] = answer[i]\n        }\n      }\n\n      // check yellows\n      for (let i = 0; i < wordLength; i++) {\n        if (answerLetters.includes(word[i]) && newCellStatuses[rowNumber][i] !== status.green) {\n          newCellStatuses[rowNumber][i] = status.yellow\n          answerLetters.splice(answerLetters.indexOf(word[i]), 1)\n        }\n      }\n\n      return newCellStatuses\n    })\n    setExactGuesses((prev: { [key: number]: string }) => ({ ...prev, ...fixedLetters }))\n  }\n\n  const isRowAllGreen = (row: string[]) => {\n    return row.every((cell: string) => cell === status.green)\n  }\n\n  // every time cellStatuses updates, check if the game is won or lost\n  useEffect(() => {\n    const cellStatusesCopy = [...cellStatuses]\n    const reversedStatuses = cellStatusesCopy.reverse()\n    const lastFilledRow = reversedStatuses.find((r) => {\n      return r[0] !== status.unguessed\n    })\n\n    if (gameState === state.playing && lastFilledRow && isRowAllGreen(lastFilledRow)) {\n      setGameState(state.won)\n\n      var streak = currentStreak + 1\n      setCurrentStreak(streak)\n      setLongestStreak((prev: number) => (streak > prev ? streak : prev))\n    } else if (gameState === state.playing && currentRow === 6) {\n      setGameState(state.lost)\n      setCurrentStreak(0)\n    }\n  }, [\n    cellStatuses,\n    currentRow,\n    gameState,\n    setGameState,\n    currentStreak,\n    setCurrentStreak,\n    setLongestStreak,\n  ])\n\n  const updateLetterStatuses = (word: string) => {\n    setLetterStatuses((prev: { [key: string]: string }) => {\n      const newLetterStatuses = { ...prev }\n      const wordLength = word.length\n      for (let i = 0; i < wordLength; i++) {\n        if (newLetterStatuses[word[i]] === status.green) continue\n\n        if (word[i] === answer[i]) {\n          newLetterStatuses[word[i]] = status.green\n        } else if (answer.includes(word[i])) {\n          newLetterStatuses[word[i]] = status.yellow\n        } else {\n          newLetterStatuses[word[i]] = status.gray\n        }\n      }\n      return newLetterStatuses\n    })\n  }\n\n  const playAgain = () => {\n    setAnswer(initialStates.answer())\n    setGameState(initialStates.gameState)\n    setBoard(initialStates.board)\n    setCellStatuses(initialStates.cellStatuses)\n    setCurrentRow(initialStates.currentRow)\n    setCurrentCol(initialStates.currentCol)\n    setLetterStatuses(initialStates.letterStatuses())\n    setSubmittedInvalidWord(initialStates.submittedInvalidWord)\n    setExactGuesses({})\n\n    closeModal()\n  }\n\n  const modalStyles = {\n    overlay: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: darkMode ? 'hsl(231, 16%, 25%)' : 'hsl(231, 16%, 92%)',\n      zIndex: 99,\n    },\n    content: {\n      top: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      transform: 'translate(-50%, -50%)',\n      height: 'calc(100% - 2rem)',\n      width: 'calc(100% - 2rem)',\n      backgroundColor: darkMode ? 'hsl(231, 16%, 25%)' : 'hsl(231, 16%, 92%)',\n      boxShadow: `${\n        darkMode\n          ? '0.2em 0.2em calc(0.2em * 2) #252834, calc(0.2em * -1) calc(0.2em * -1) calc(0.2em * 2) #43475C'\n          : '0.2em 0.2em calc(0.2em * 2) #A3A7BD, calc(0.2em * -1) calc(0.2em * -1) calc(0.2em * 2) #FFFFFF'\n      }`,\n      border: 'none',\n      borderRadius: '1rem',\n      maxWidth: '475px',\n      maxHeight: '650px',\n      position: 'relative',\n    },\n  }\n\n  return (\n    <div className={darkMode ? 'dark' : ''}>\n      <div className={`flex flex-col justify-between h-fill bg-background dark:bg-background-dark`}>\n        <header className=\"flex items-center py-2 px-3 text-primary dark:text-primary-dark\">\n          <button\n            type=\"button\"\n            onClick={() => setSettingsModalIsOpen(true)}\n            className=\"p-1 rounded-full\"\n          >\n            <Settings />\n          </button>\n          <h1 className=\"flex-1 text-center text-xl xxs:text-2xl sm:text-4xl tracking-wide font-bold font-righteous\">\n            WORD MASTER\n          </h1>\n          <button\n            type=\"button\"\n            onClick={() => setInfoModalIsOpen(true)}\n            className=\"p-1 rounded-full\"\n          >\n            <Info />\n          </button>\n        </header>\n        <div className=\"flex items-center flex-col py-3 flex-1 justify-center relative\">\n          <div className=\"relative\">\n            <div className=\"grid grid-cols-5 grid-flow-row gap-4\">\n              {board.map((row: string[], rowNumber: number) =>\n                row.map((letter: string, colNumber: number) => (\n                  <span\n                    key={colNumber}\n                    className={`${getCellStyles(\n                      rowNumber,\n                      colNumber,\n                      letter\n                    )} inline-flex items-center font-medium justify-center text-lg w-[13vw] h-[13vw] xs:w-14 xs:h-14 sm:w-20 sm:h-20 rounded-full`}\n                  >\n                    {letter}\n                  </span>\n                ))\n              )}\n            </div>\n            <div\n              className={`absolute -bottom-24 left-1/2 transform -translate-x-1/2 ${\n                gameState === state.playing ? 'hidden' : ''\n              }`}\n            >\n              <div className={darkMode ? 'dark' : ''}>\n                <button\n                  autoFocus\n                  type=\"button\"\n                  className=\"rounded-lg z-10 px-6 py-2 text-lg nm-flat-background dark:nm-flat-background-dark hover:nm-inset-background dark:hover:nm-inset-background-dark text-primary dark:text-primary-dark\"\n                  onClick={playAgain}\n                >\n                  Play Again\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <InfoModal\n          isOpen={infoModalIsOpen}\n          handleClose={handleInfoClose}\n          darkMode={darkMode}\n          styles={modalStyles}\n        />\n        <EndGameModal\n          isOpen={modalIsOpen}\n          handleClose={closeModal}\n          styles={modalStyles}\n          darkMode={darkMode}\n          gameState={gameState}\n          state={state}\n          currentStreak={currentStreak}\n          longestStreak={longestStreak}\n          answer={answer}\n          playAgain={playAgain}\n        />\n        <SettingsModal\n          isOpen={settingsModalIsOpen}\n          handleClose={() => setSettingsModalIsOpen(false)}\n          styles={modalStyles}\n          darkMode={darkMode}\n          toggleDarkMode={toggleDarkMode}\n          difficultyLevel={difficultyLevel}\n          setDifficultyLevel={setDifficultyLevel}\n          levelInstructions={getDifficultyLevelInstructions()}\n        />\n        <div className={`h-auto relative ${gameState === state.playing ? '' : 'invisible'}`}>\n          <Keyboard\n            letterStatuses={letterStatuses}\n            addLetter={addLetter}\n            onEnterPress={onEnterPress}\n            onDeletePress={onDeletePress}\n            gameDisabled={gameState !== state.playing}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}